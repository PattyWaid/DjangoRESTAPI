# Generated by Django 3.0.8 on 2020-08-22 06:41

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BlogapiComments',
            fields=[
                ('commentid', models.AutoField(db_column='commentId', primary_key=True, serialize=False)),
                ('commenttext', models.CharField(db_column='commentText', max_length=255)),
                ('commentuser', models.CharField(db_column='commentUser', max_length=10)),
            ],
            options={
                'db_table': 'blogapi_comments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BlogapiCommentsreply',
            fields=[
                ('replytext', models.CharField(db_column='replyText', max_length=255)),
                ('replyid', models.AutoField(db_column='replyId', primary_key=True, serialize=False)),
                ('replyuser', models.CharField(db_column='replyUser', max_length=10)),
                ('commentreply_id', models.IntegerField(db_column='commentReply_id')),
            ],
            options={
                'db_table': 'blogapi_commentsreply',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BlogapiPosts',
            fields=[
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('imagepath', models.CharField(db_column='imagePath', max_length=200)),
                ('category', models.CharField(max_length=255)),
                ('recid', models.AutoField(db_column='recId', primary_key=True, serialize=False)),
                ('user', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'blogapi_posts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PostAuthorizer',
            fields=[
                ('authorizer_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('authorization_count', models.IntegerField()),
                ('is_active', models.IntegerField()),
            ],
            options={
                'db_table': 'post_authorizer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Posts',
            fields=[
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('imagepath', models.CharField(db_column='imagePath', max_length=255)),
                ('category', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=255)),
                ('recid', models.AutoField(db_column='recId', primary_key=True, serialize=False)),
                ('user', models.CharField(max_length=255)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(null=True)),
                ('is_activated', models.BooleanField(null=True)),
                ('activation_date', models.DateTimeField(blank=True, null=True)),
                ('authorization_status', models.CharField(choices=[('PENDING', 'Pending'), ('IN REVIEW', 'In Review'), ('COMPLETE', 'Complete')], default='PENDING', max_length=15)),
            ],
            options={
                'db_table': 'posts',
                'managed': False,
            },
        ),
    ]
